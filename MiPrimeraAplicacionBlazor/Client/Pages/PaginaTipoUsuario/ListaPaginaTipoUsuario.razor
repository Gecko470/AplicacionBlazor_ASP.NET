@page "/listaPaginaTipoUsuario/{idPagina}"
@inject HttpClient http
@using MiPrimeraAplicacionBlazor.Shared
<h1>Pagina Tipo Usuario</h1>


@{
    string[] cabeceras = { "ID Página Tipo Usuario", "Nombre Tipo Usuario", "Nombre Página" };
    string[] parametrosAmostrar = { "iidPaginaTipoUsuario", "nombreTipoUsuario", "nombrePagina" };
}

<AuthorizeView>
    <Authorized>
        <ListarRazor2 cabeceras="cabeceras" parametrosAmostrar="parametrosAmostrar" lista="lista"
                      type="combobox" button=false label="Selecciona Tipo de Usuario"
                      combobox="listaTipoUsuario" displayMember="nombre" valueMember="iidTipoUsuario"
                      eventoBusqueda="Buscar" permitirEditar=permitirEditar rutaEditar="editarPaginaTipoUsuario"
                      permitirExcel="permitirExcel" permitirWord="permitirWord" permitirPDF="permitirPDF"/>
    </Authorized>
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> auth { get; set; }

    List<int> listaBotones = new List<int>();

    public bool permitirEditar = false;
    public bool permitirExcel = false;
    public bool permitirWord = false;
    public bool permitirPDF = false;

    [Parameter]
    public string idPagina { get; set; }

    public PaginaTipoUsuarioCLS[] lista;
    public TipoUsuarioCLS[] listaTipoUsuario;

    protected async override Task OnInitializedAsync()
    {
        lista = await http.GetFromJsonAsync<PaginaTipoUsuarioCLS[]>("api/PaginaTipoUsuario/Listar");
        listaTipoUsuario = await http.GetFromJsonAsync<TipoUsuarioCLS[]>("api/TipoUsuario/ListarTipoUsuario");

        //Para los botones

        var authUser = await auth;
        var user = authUser.User;

        if (user.Identity.IsAuthenticated)
        {
            listaBotones = await http.GetFromJsonAsync<List<int>>("api/PaginaTipoUsuario/listarBotones/" + user.Identity.Name + "/" + idPagina);

            if (listaBotones.Count > 0)
            {

                if (listaBotones.Contains(2))
                {
                    permitirEditar = true;
                }
                if (listaBotones.Contains(4))
                {
                    permitirExcel = true;
                }
                if (listaBotones.Contains(5))
                {
                    permitirWord = true;
                }
                if (listaBotones.Contains(6))
                {
                    permitirPDF = true;
                }
            }
        }
    }

    public async Task Buscar(string iid)
    {
        lista = await http.GetFromJsonAsync<PaginaTipoUsuarioCLS[]>("api/PaginaTipoUsuario/Filtrar/" + iid);
    }

}
