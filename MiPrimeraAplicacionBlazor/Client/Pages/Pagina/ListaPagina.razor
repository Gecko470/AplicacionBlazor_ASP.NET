@page "/listaPagina/{idPagina}"
@using MiPrimeraAplicacionBlazor.Shared
@inject HttpClient http
<h1>Páginas</h1>

@{
    string[] cabeceras = { "ID Pagina", "Mensaje", "Accion", "Visible" };
    string[] parametrosAmostrar = { "iidPagina", "mensaje", "accion", "nombreVisible" };
}

<AuthorizeView>

    <Authorized>

        <ListarRazor2 cabeceras="cabeceras" parametrosAmostrar="parametrosAmostrar" lista="listaPagina"
                      permitirAgregar=permitirAgregar rutaAgregar="agregarPagina" permitirEditar=permitirEditar rutaEditar="editarPagina"
                      permitirEliminar=permitirEliminar type="text" button=false label="Introduce nombre de Página"
                      eventoEliminar="Eliminar" eventoBusqueda="Buscar" permitirExcel=permitirExcel permitirPDF=permitirPDF permitirWord=permitirWord tituloReporte="Lista Páginas" />

    </Authorized>

</AuthorizeView>





@code {

    [CascadingParameter]
    private Task<AuthenticationState> auth { get; set; }

    List<int> listaBotones = new List<int>();

    public bool permitirAgregar = false;
    public bool permitirEditar = false;
    public bool permitirEliminar = false;
    public bool permitirExcel = false;
    public bool permitirWord = false;
    public bool permitirPDF = false;

    [Parameter]
    public string idPagina { get; set; }

    public PaginaCLS[] listaPagina;

    protected async override Task OnInitializedAsync()
    {

        listaPagina = await http.GetFromJsonAsync<PaginaCLS[]>("api/Pagina/ListarPagina");

        //Para los botones

        var authUser = await auth;
        var user = authUser.User;

        if (user.Identity.IsAuthenticated)
        {
            listaBotones = await http.GetFromJsonAsync<List<int>>("api/PaginaTipoUsuario/listarBotones/" + user.Identity.Name + "/" + idPagina);

            if (listaBotones.Count > 0)
            {
                if (listaBotones.Contains(1))
                {
                    permitirAgregar = true;
                }
                if (listaBotones.Contains(2))
                {
                    permitirEditar = true;
                }
                if (listaBotones.Contains(3))
                {
                    permitirEliminar = true;
                }
                if (listaBotones.Contains(4))
                {
                    permitirExcel = true;
                }
                if (listaBotones.Contains(5))
                {
                    permitirWord = true;
                }
                if (listaBotones.Contains(6))
                {
                    permitirPDF = true;
                }
            }
        }
    }

    public async Task Eliminar(string iidPagina)
    {
        int rpta = await http.GetFromJsonAsync<int>("api/Pagina/EliminarPagina/" + iidPagina);
        if (rpta == 1)
        {
            listaPagina = await http.GetFromJsonAsync<PaginaCLS[]>("api/Pagina/ListarPagina");
        }
    }

    public async Task Buscar(string valor)
    {
        listaPagina = await http.GetFromJsonAsync<PaginaCLS[]>("api/Pagina/FiltrarPagina/" + valor);
    }
}
